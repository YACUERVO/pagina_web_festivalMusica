{"version":3,"sources":["app.js","galeria.js"],"names":["navegacionFija","barra","document","querySelector","IntersectionObserver","entries","isIntersecting","classList","remove","add","observe","ScrollNav","querySelectorAll","forEach","enlace","addEventListener","evento","preventDefault","console","log","target","attributes","href","value","scrollIntoView","behavior","crearGaleria","galeria","i","imagen","createElement","src","dataset","imagenId","onclick","mostrarImagen","lista","appendChild","e","id","parseInt","imagen1","overlay","cerrarImagen","textContent","body"],"mappings":"AAOA,SAAAA,iBACA,MAAAC,EAAAC,SAAAC,cAAA,UAEA,IAAAC,sBAAA,SAAAC,GACAA,EAAA,GAAAC,eACAL,EAAAM,UAAAC,OAAA,QAEAP,EAAAM,UAAAE,IAAA,WAMAC,QAAAR,SAAAC,cAAA,cAGA,SAAAQ,YACAT,SAAAU,iBAAA,4BAEAC,SAAA,SAAAC,GACAA,EAAAC,iBAAA,SAAA,SAAAC,GACAA,EAAAC,iBAEAC,QAAAC,IAAAH,EAAAI,OAAAC,WAAAC,KAAAC,OAGArB,SAAAC,cAAAa,EAAAI,OAAAC,WAAAC,KAAAC,OACAC,eAAA,CACAC,SAAA,iBC5BA,SAAAC,eACA,MAAAC,EAAAzB,SAAAC,cAAA,sBACA,IAAA,IAAAyB,EAAA,EAAAA,GAAA,GAAAA,IAAA,CACA,MAAAC,EAAA3B,SAAA4B,cAAA,OACAD,EAAAE,IAAA,mBAAAH,SACAC,EAAAG,QAAAC,SAAAL,EAKAC,EAAAK,QAAAC,cAEA,MAAAC,EAAAlC,SAAA4B,cAAA,MACAM,EAAAC,YAAAR,GAIAF,EAAAU,YAAAD,IASA,SAAAD,cAAAG,GAGA,MAAAC,EAAAC,SAAAF,EAAAlB,OAAAY,QAAAC,UAIAQ,EAAAvC,SAAA4B,cAAA,OACAW,EAAAV,IAAA,oBAAAQ,SAEArB,QAAAC,IAAAsB,GAEA,MAAAC,EAAAxC,SAAA4B,cAAA,OACAY,EAAAL,YAAAI,GACAC,EAAAnC,UAAAE,IAAA,WAGA,MAAAkC,EAAAzC,SAAA4B,cAAA,KACAa,EAAAC,YAAA,IACAD,EAAApC,UAAAE,IAAA,kBAGAkC,EAAAT,QAAA,WACAQ,EAAAlC,UAGAkC,EAAAR,QAAA,WACAQ,EAAAlC,UAGAkC,EAAAL,YAAAM,GAGA,MAAAE,EAAA3C,SAAAC,cAAA,QACA0C,EAAAR,YAAAK,GACAG,EAAAtC,UAAAE,IAAA,eDpEAP,SAAAa,iBAAA,oBAAA,WACAJ,YAEAX,oBCHAE,SAAAa,iBAAA,oBAAA,WACAW","file":"bundle.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\r\n    ScrollNav();\r\n\r\n    navegacionFija();\r\n\r\n});\r\n\r\nfunction navegacionFija() {\r\n    const barra = document.querySelector('header')\r\n        //registrar el intersection observer\r\n    const observer = new IntersectionObserver(function(entries) {\r\n        if (entries[0].isIntersecting) {\r\n            barra.classList.remove('fijo');\r\n        } else {\r\n            barra.classList.add('fijo');\r\n\r\n        }\r\n    })\r\n\r\n    //elemento a observar\r\n    observer.observe(document.querySelector('.festival'));\r\n}\r\n\r\nfunction ScrollNav() {\r\n    const enlaces = document.querySelectorAll('.navegacion__principal a');\r\n\r\n    enlaces.forEach(function(enlace) {\r\n        enlace.addEventListener('click', function(evento) {\r\n            evento.preventDefault();\r\n\r\n            console.log(evento.target.attributes.href.value);\r\n            //codigo para verificar a que le estoy dando clic\r\n\r\n            const seccion = document.querySelector(evento.target.attributes.href.value);\r\n            seccion.scrollIntoView({\r\n                behavior: 'smooth',\r\n            }); //dar salto directo a la siguiente seccion con js. Seccion se demora un timpo\r\n        });\r\n        //forEach si queremos recorrer en un arreglo solo sirve para interarcion pero no guarde ninguna operacion\r\n    });\r\n\r\n\r\n\r\n}","document.addEventListener('DOMContentLoaded', function() {\r\n    crearGaleria();\r\n});\r\n//El DOMContentLoadedevento se activa cuando el documento HTML inicial se ha cargado y analizado por completo, sin esperar a que las hojas de estilo, las imágenes y los subcuadros terminen de cargarse. \r\n\r\n\r\n//definimos la funcion\r\nfunction crearGaleria() {\r\n    const galeria = document.querySelector('.galeria__imagenes');\r\n    for (let i = 1; i <= 12; i++) {\r\n        const imagen = document.createElement('IMG');\r\n        imagen.src = `build/img/thumb/${i}.webp`;\r\n        imagen.dataset.imagenId = i; //para crear atributo\r\n        //primero genero una imagen\r\n        //para crear la estrucutra del html\r\n\r\n        //añadir la funcion mostrar imagen para darle clik es bueno generar el evento\r\n        imagen.onclick = mostrarImagen;\r\n\r\n        const lista = document.createElement('LI');\r\n        lista.appendChild(imagen);\r\n        //luego genero una lista para crear una lista de imagenen\r\n        //para sacar la iamgen en el hmtl\r\n\r\n        galeria.appendChild(lista);\r\n        //luego genero la lista de imagenes\r\n    }\r\n\r\n}\r\n//funcion para llamar imagenes en el html\r\n\r\n//addEventListener() Registra un evento a un objeto en específico. El Objeto especifico puede ser un simple elemento en un archivo, el mismo  documento , una ventana\r\n\r\nfunction mostrarImagen(e) {\r\n\r\n\r\n    const id = parseInt(e.target.dataset.imagenId);\r\n    //parseInt Convierte (parsea) un argumento de tipo cadena y devuelve un entero de la base especificada. comprueba el primer argumento, una cadena, e intenta devolver un entero de la base especificada\r\n\r\n    //generar la imagen\r\n    const imagen1 = document.createElement('IMG');\r\n    imagen1.src = `build/img/grande/${id}.webp`;\r\n\r\n    console.log(imagen1);\r\n\r\n    const overlay = document.createElement('DIV');\r\n    overlay.appendChild(imagen1);\r\n    overlay.classList.add('overlay');\r\n\r\n    //boton para cerrar la imagen\r\n    const cerrarImagen = document.createElement('P');\r\n    cerrarImagen.textContent = 'X';\r\n    cerrarImagen.classList.add('cerrar__imagen');\r\n\r\n    //cuando se preciona se cierra la imagen\r\n    cerrarImagen.onclick = function() {\r\n            overlay.remove()\r\n        }\r\n        //cuando se da clic cerrar la imagen tambien por fuera de la imagen\r\n    overlay.onclick = function() {\r\n        overlay.remove()\r\n    }\r\n\r\n    overlay.appendChild(cerrarImagen);\r\n\r\n    //mostrar en el hmtl\r\n    const body = document.querySelector('body');\r\n    body.appendChild(overlay);\r\n    body.classList.add('fijar__body') //appenchild es para agregar as variable o el codigo en el html\r\n\r\n\r\n}"]}